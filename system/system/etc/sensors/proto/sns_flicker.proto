// @file sns_flicker.proto
//
// Defines the API for Flicker Sensors.
// All Flicker Sensor drivers are required to comply with this API.
// Any new functionality for Flicker Sensor can be defined in a
// device specific API file.
//
// Copyright (c) 2016-2017 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.

syntax = "proto2";
import "nanopb.proto";
import "sns_std_sensor.proto";
import "sns_physical_sensor_test.proto";

// Attribute requirements:
// The Flicker Sensor publishes:
// 1. SNS_STD_SENSOR_ATTRID_TYPE attribute value as "proximity_flicker".
// 2. SNS_STD_SENSOR_ATTRID_RESOLUTIONS attribute value in mHZ.
// 3. SNS_STD_SENSOR_ATTRID_RANGES attribute values in HZ unit.
// 4. SNS_STD_SENSOR_ATTRID_RATES
//    - For on-change not applicable
//    - For streaming see sns_std_sensor.proto
// 5. See sns_std_sensor.proto for other attributes.

// Handling stream requests:
// 1. The flicker Sensor supports both streaming and on-change
//    modes and the operating mode is configured in the Registry.
// 2. The streaming flicker Sensor handles the sns_std_sensor_config
//    request for all stream enable/update requests.
// 3. The on-change flicker Sensor handles the
//    SNS_STD_SENSOR_MSGID_SNS_STD_ON_CHANGE_CONFIG request for
//    all stream enable/update requests.
// 4. In on-change mode the Sensor uses interrupt operation and reports
//    samples for only significant change in flicker.
//    Example: +/- 10% change.

// Handling stream events:
// 1. The flicker Sensor publishes current illumination data stream
//    events using the sns_std_sensor_event message.
// 2. Each stream event contains two output data fields where data is
//    factory calibrated and ordered as:
//    data[0] = flicker
//    data[1] = flicker
//    data[2] = flicker
// 3. Each stream event publishes an accuracy field:
//    SNS_STD_SENSOR_SAMPLE_STATUS_UNRELIABLE to mark invalid samples when hardware is
//    yet to stabilize after the sensor is configured.
//    SNS_STD_SENSOR_SAMPLE_STATUS_ACCURACY_HIGH to mark samples when they are valid.
// 4. The Ambient Light Sensor publishes a configuration event using the
//    sns_std_sensor_physical_config_event message.
//    It publishes this event each time there is change in hardware config of the sensor
//    and contains current physical sensor config of the sensor.

// Handling self-test requests:
// 1. The flicker Sensor implements SNS_PHYSICAL_SENSOR_TEST_TYPE_COM test
//    type using the physical sensor test API.
// 2. The flicker Sensor implements SNS_PHYSICAL_SENSOR_TEST_TYPE_FACTORY test
//    type to determine factory calibration parameters using the physical
//    sensor test API.
// 3. The flicker Sensor could implement other test types.

// Handling test events:
// 1. The flicker Sensor uses sns_physical_sensor_test_event message to publish
//    a test completion event.
// 2. The test_passed field in sns_physical_sensor_test_event is used to output the
//    pass/fail result of self-test execution.
// 3. The test_data field in sns_physical_sensor_test_event could be used to output any
//    driver-specific error data.
